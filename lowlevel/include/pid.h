


#define TYPE_ASSERVISSEMENT_PID_POS double
#define TYPE_ASSERVISSEMENT_PID_TIME double
#define TYPE_ASSERVISSEMENT_PID_PARAM double

#define TYPE_ASSERVISSEMENT_PID_INTEGRAL double
#define TYPE_ASSERVISSEMENT_PID_DERIVATIVE double
#define TYPE_ASSERVISSEMENT_PID_RETURN double

typedef struct
{
    TYPE_ASSERVISSEMENT_PID_PARAM P, I, D;
    TYPE_ASSERVISSEMENT_PID_INTEGRAL AbsIMax; //Anti-windup

    TYPE_ASSERVISSEMENT_PID_INTEGRAL Integration;
    TYPE_ASSERVISSEMENT_PID_TIME LastTime;
    TYPE_ASSERVISSEMENT_PID_POS LastValue;
    TYPE_ASSERVISSEMENT_PID_POS Target;

} PID_Data;
 
/*
Sets P, I, and D for a given PID loop, and sets the max of the error integration (before multiplication by I)
*/
void PID_SetParameters(PID_Data* PID, TYPE_ASSERVISSEMENT_PID_PARAM InP, TYPE_ASSERVISSEMENT_PID_PARAM InI, TYPE_ASSERVISSEMENT_PID_PARAM InD, TYPE_ASSERVISSEMENT_PID_INTEGRAL InAbsIMax);

/*
Set the target position
*/
void PID_SetTarget(PID_Data* PID, TYPE_ASSERVISSEMENT_PID_POS NewTarget);

/*
Resets the position, integration and time
*/
void PID_Reset(PID_Data* PID, TYPE_ASSERVISSEMENT_PID_TIME Time, TYPE_ASSERVISSEMENT_PID_INTEGRAL Integral, TYPE_ASSERVISSEMENT_PID_POS LastValue);

TYPE_ASSERVISSEMENT_PID_RETURN PID_Tick(PID_Data* PID, TYPE_ASSERVISSEMENT_PID_POS Position, TYPE_ASSERVISSEMENT_PID_TIME Time);